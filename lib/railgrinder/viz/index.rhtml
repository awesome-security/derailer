<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?1.27.2"></script>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js?1.27.2"></script>
    <style type="text/css">

.node rect {
  cursor: pointer;
  fill: #fff;
  fill-opacity: .5;
  stroke: #3182bd;
  stroke-width: 1.5px;
}

.node text {
  font: 10px sans-serif;
  pointer-events: none;
}

path.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

#tabs {
 width: 1000px;
 margin-left: auto;
 margin-right: auto;
}
#chart {
 float: left;
}
#key {
 float: left;
 border: 2px solid #3182bd;
 margin-left: 50px;
}

    </style>

  <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
  <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
  <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
  <link rel="stylesheet" href="/resources/demos/style.css" />
  <script>
  $(function() {
    $( "#tabs" ).tabs();
  });
  </script>

<title>Railgrinder Results</title>
</head>
<body>

<div id="tabs">
  <h2>Railgrinder Results</h2>
  <h3><%= servlet_request.query[:rails_root] %></h3>
  <ul>
    <li><a href="#tabs-1">Results</a></li>
    <li><a href="#tabs-2">Log</a></li>
  </ul>


  <div style="height:2800px" id="tabs-1">

<div id="chart"></div>

<script type="text/javascript">

var w = 660,
    h = 2800,
    i = 0,
    barHeight = 25,
    barWidth = w * .8,
    duration = 400,
    root;

var tree = d3.layout.tree()
    .size([h, 100]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(20,30)");

d3.json("graph.json", function(json) {
  json.x0 = 0;
  json.y0 = 0;
  update(root = json);
});

function update(source) {

  // Compute the flattened node list. TODO use d3.layout.hierarchy.
  var nodes = tree.nodes(root);
  
  // Compute the "layout".
  nodes.forEach(function(n, i) {
    n.x = i * barHeight;
  });
  
  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });
  
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .style("opacity", 1e-6);

  // Enter any new nodes at the parent's previous position.
  nodeEnter.append("svg:rect")
      .attr("y", -barHeight / 2 + 2)
      .attr("height", barHeight-5)
      .attr("width", barWidth)
      .style("fill", color)
      .on("click", click);
  
  nodeEnter.append("svg:text")
      .attr("dy", 3.5)
      .attr("dx", 5.5)
      .text(function(d) { return d.name; });
  
  // Transition nodes to their new position.
  nodeEnter.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1);
  
  node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1)
    .select("rect")
      .style("fill", color);
  
  // Transition exiting nodes to the parent's new position.
  node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .style("opacity", 1e-6)
      .remove();
  
  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });
  
  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);
  
  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);
  
  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();
  
  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

function color(d) {
  return d._children ? d.closed_color : d.open_color;
}

    </script>


<div id="key">
<h2 align="center">Key</h2>

<svg width="200" height="200"><g transform="translate(20,30)"><path class="link" d="M0,0C4.166666666666666,0 4.166666666666666,25 8.333333333333332,25"></path><path class="link" d="M8.333333333333332,25C12.499999999999998,25 12.499999999999998,50 16.666666666666664,50"></path><path class="link" d="M16.666666666666664,50C20.833333333333332,50 20.833333333333332,75 25,75"></path><path class="link" d="M25,75C29.166666666666664,75 29.166666666666664,100 33.33333333333333,100"></path><path class="link" d="M33.33333333333333,100C37.5,100 37.5,125 41.66666666666667,125"></path><path class="link" d="M41.66666666666667,125C45.833333333333336,125 45.833333333333336,150 50,150"></path><g class="node" transform="translate(0,0)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #536f05; "></rect><text dy="3.5" dx="5.5">Base Type</text></g><g class="node" transform="translate(8.333333015441895,25)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #7192df; "></rect><text dy="3.5" dx="5.5">Type</text></g><g class="node" transform="translate(16.66666603088379,50)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #65e2a2; "></rect><text dy="3.5" dx="5.5">Expression</text></g><g class="node" transform="translate(25,75)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #d1f56e; "></rect><text dy="3.5" dx="5.5">Condition 1</text></g><g class="node" transform="translate(33.33333206176758,100)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #d1f56e; "></rect><text dy="3.5" dx="5.5">Condition 2</text></g><g class="node" transform="translate(41.66666793823242,125)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #8d9280; "></rect><text dy="3.5" dx="5.5">Releasing Controller</text></g><g class="node" transform="translate(50,150)" style="opacity: 1; "><rect y="-10.5" height="20" width="108" style="fill: #ffffff; "></rect><text dy="3.5" dx="5.5">Releasing Action</text></g></g></svg>

</div>


  </div>
  <div id="tabs-2">
    <p><%= servlet_request.query[:log].join("<br>\n") %></p>
  </div>
</div>
  
  </body>
</html>
